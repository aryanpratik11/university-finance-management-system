import { useEffect, useState, useContext } from "react";
import { AuthContext } from "../context/authContext";
import { Link } from "react-router-dom";
import api from "../api";
import { format } from "date-fns";
import DashboardCard from "../components/DashboardCard";
import DashboardSection from "../components/DashboardSection";

export default function StudentDashboard() {
    const { user } = useContext(AuthContext);
    const [dashboardData, setDashboardData] = useState({
        fees: [],
        applications: [],
        disbursements: [],
        stats: {
            totalFees: 0,
            pendingFees: 0,
            totalAid: 0,
            pendingApps: 0
        }
    });
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        if (!user || !user.student_id) return;

        const fetchDashboardData = async () => {
            try {
                setLoading(true);
                setError(null);

                const [feesRes, appsRes, disbursementsRes] = await Promise.all([
                    api.get(`/students/allfeest/${user.student_id}`),
                    api.get(`/students/aid-applications/${user.student_id}`),
                    api.get(`/students/disbursements/${user.student_id}`)
                ]);

                // Calculate statistics
                const pendingFees = feesRes.data.filter(fee => fee.status !== 'paid').length;
                const pendingApps = appsRes.data.filter(app => app.status === 'pending').length;
                const totalAid = disbursementsRes.data.reduce((sum, d) => sum + parseFloat(d.amount), 0);
                const totalFees = feesRes.data.reduce((sum, fee) => sum + parseFloat(fee.total_amount), 0);

                setDashboardData({
                    fees: feesRes.data,
                    applications: appsRes.data,
                    disbursements: disbursementsRes.data,
                    stats: {
                        totalFees,
                        pendingFees,
                        totalAid,
                        pendingApps
                    }
                });
            } catch (err) {
                console.error("Error fetching dashboard data:", err);
                setError("Failed to load dashboard data. Please try again later.");
            } finally {
                setLoading(false);
            }
        };

        fetchDashboardData();
    }, [user]);

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center">
                    <p className="text-gray-600 mb-2">Loading your dashboard</p>
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-900 mx-auto"></div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <div className="text-center p-6 bg-white rounded-lg shadow-sm max-w-md">
                    <h3 className="text-lg font-medium text-red-600 mb-2">Error Loading Dashboard</h3>
                    <p className="text-gray-600 mb-4">{error}</p>
                    <button
                        onClick={() => window.location.reload()}
                        className="px-4 py-2 bg-blue-900 text-white rounded hover:bg-blue-800 transition-colors"
                    >
                        Retry
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                {/* Dashboard Header */}
                <div className="mb-8">
                    <h1 className="text-2xl font-bold text-gray-900">Welcome back, {user?.name || 'Student'}</h1>
                    <p className="text-gray-600 mt-1">Here's your financial overview</p>
                </div>

                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                    <DashboardCard
                        title="Total Fees Due"
                        value={`₹${dashboardData.stats.totalFees.toLocaleString()}`}
                        description={`${dashboardData.stats.pendingFees} pending payments`}
                        color="blue"
                    />

                    <DashboardCard
                        title="Total Aid Received"
                        value={`₹${dashboardData.stats.totalAid.toLocaleString()}`}
                        description={`From ${dashboardData.disbursements.length} disbursements`}
                        color="green"
                    />

                    <DashboardCard
                        title="Pending Applications"
                        value={dashboardData.stats.pendingApps}
                        description="Aid applications under review"
                        color="yellow"
                    />

                    <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
                        <h3 className="text-sm font-medium text-gray-500">Quick Actions</h3>
                        <div className="mt-4 space-y-2">
                            <Link
                                to="/student/pay-fees"
                                className="inline-block w-full px-3 py-2 bg-blue-900 text-white text-sm font-medium rounded-lg text-center hover:bg-blue-800 transition-colors"
                            >
                                Pay Fees
                            </Link>
                            <Link
                                to="/student/apply-aid"
                                className="inline-block w-full px-3 py-2 bg-white border border-gray-300 text-gray-700 text-sm font-medium rounded-lg text-center hover:bg-gray-50 transition-colors"
                            >
                                Apply for Aid
                            </Link>
                        </div>
                    </div>
                </div>

                {/* Data Sections */}
                <DashboardSection
                    title="Fee Payments"
                    data={dashboardData.fees}
                    viewAllLink="/student/fees"
                    columns={[
                        { header: "Description", accessor: "fee_name", className: "font-medium text-gray-900" },
                        { header: "Amount", accessor: "total_amount", format: value => `₹${parseFloat(value).toLocaleString()}` },
                        { header: "Due Date", accessor: "due_date", format: value => value ? format(new Date(value), "dd MMM yyyy") : "-" },
                        {
                            header: "Status",
                            accessor: "status",
                            cell: (value) => (
                                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${value === "paid" ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800"
                                    }`}>
                                    {value}
                                </span>
                            )
                        }
                    ]}
                    emptyMessage="No fee records found"
                />

                <DashboardSection
                    title="Aid Applications"
                    data={dashboardData.applications}
                    viewAllLink="/student/aid-applications"
                    columns={[
                        { header: "Aid Type", accessor: "aid_type", className: "font-medium text-gray-900" },
                        { header: "Amount", accessor: "amount_requested", format: value => `₹${value.toLocaleString()}` },
                        {
                            header: "Status",
                            accessor: "status",
                            cell: (value) => (
                                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${value === 'approved' ? 'bg-green-100 text-green-800' :
                                    value === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                        'bg-red-100 text-red-800'
                                    }`}>
                                    {value}
                                </span>
                            )
                        },
                        { header: "Submitted", accessor: "submitted_at", format: value => format(new Date(value), "dd MMM yyyy") }
                    ]}
                    emptyMessage="No aid applications submitted yet"
                />

                <DashboardSection
                    title="Aid Disbursements"
                    data={dashboardData.disbursements}
                    viewAllLink="/student/disbursements"
                    columns={[
                        { header: "Aid Type", accessor: "aid_type", className: "font-medium text-gray-900", default: "N/A" },
                        { header: "Amount", accessor: "amount", format: value => `₹${value.toLocaleString()}` },
                        { header: "Disbursed On", accessor: "disbursed_at", format: value => format(new Date(value), "dd MMM yyyy") }
                    ]}
                    emptyMessage="No disbursements received yet"
                />
            </div>
        </div>
    );
}